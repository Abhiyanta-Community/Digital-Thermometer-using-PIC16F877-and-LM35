

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Jan 29 21:48:07 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.31
    17                           ; Generated 13/10/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0088                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  000E                     	;# 
   185  000F                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0013                     	;# 
   190  0014                     	;# 
   191  0015                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  001D                     	;# 
   202  001E                     	;# 
   203  001F                     	;# 
   204  0081                     	;# 
   205  0085                     	;# 
   206  0086                     	;# 
   207  0087                     	;# 
   208  0088                     	;# 
   209  0089                     	;# 
   210  008C                     	;# 
   211  008D                     	;# 
   212  008E                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009E                     	;# 
   220  009F                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227                           
   228                           	psect	idataBANK0
   229  00A6                     __pidataBANK0:
   230                           
   231                           ;initializer for main@F1308
   232  00A6  343F               	retlw	63
   233  00A7  3400               	retlw	0
   234  00A8  3406               	retlw	6
   235  00A9  3400               	retlw	0
   236  00AA  345B               	retlw	91
   237  00AB  3400               	retlw	0
   238  00AC  344F               	retlw	79
   239  00AD  3400               	retlw	0
   240  00AE  3466               	retlw	102
   241  00AF  3400               	retlw	0
   242  00B0  346D               	retlw	109
   243  00B1  3400               	retlw	0
   244  00B2  347D               	retlw	125
   245  00B3  3400               	retlw	0
   246  00B4  3407               	retlw	7
   247  00B5  3400               	retlw	0
   248  00B6  347F               	retlw	127
   249  00B7  3400               	retlw	0
   250  00B8  346F               	retlw	111
   251  00B9  3400               	retlw	0
   252  0001                     _TMR0	set	1
   253  0006                     _PORTB	set	6
   254  005D                     _TMR0IE	set	93
   255  005E                     _PEIE	set	94
   256  005F                     _GIE	set	95
   257  005A                     _TMR0IF	set	90
   258  0081                     _OPTION_REG	set	129
   259  0086                     _TRISB	set	134
   260                           
   261                           	psect	cinit
   262  000F                     start_initialization:	
   263                           ; #config settings
   264                           
   265  000F                     __initialization:
   266                           
   267                           ; Initialize objects allocated to BANK0
   268  000F  1383               	bcf	3,7	;select IRP bank0
   269  0010  304A               	movlw	low (__pdataBANK0+20)
   270  0011  00FD               	movwf	btemp+-1
   271  0012  3000               	movlw	high __pidataBANK0
   272  0013  00FE               	movwf	btemp
   273  0014  30A6               	movlw	low __pidataBANK0
   274  0015  00FF               	movwf	btemp+1
   275  0016  3036               	movlw	low __pdataBANK0
   276  0017  0084               	movwf	4
   277  0018  120A  118A  20D2  120A  118A  	fcall	init_ram0
   278                           
   279                           ; Clear objects allocated to BANK0
   280  001D  01CA               	clrf	__pbssBANK0& (0+127)
   281  001E  01CB               	clrf	(__pbssBANK0+1)& (0+127)
   282  001F                     end_of_initialization:	
   283                           ;End of C runtime variable initialization code
   284                           
   285  001F                     __end_of__initialization:
   286  001F  0183               	clrf	3
   287  0020  120A  118A  2823   	ljmp	_main	;jump to C main() function
   288                           
   289                           	psect	bssBANK0
   290  004A                     __pbssBANK0:
   291  004A                     _count:
   292  004A                     	ds	2
   293                           
   294                           	psect	dataBANK0
   295  0036                     __pdataBANK0:
   296  0036                     main@F1308:
   297  0036                     	ds	20
   298                           
   299                           	psect	inittext
   300  00CE                     init_fetch0:	
   301                           ;	Called with low address in FSR and high address in W
   302                           
   303  00CE  087E               	movf	btemp,w
   304  00CF  008A               	movwf	10
   305  00D0  087F               	movf	btemp+1,w
   306  00D1  0082               	movwf	2
   307  00D2                     init_ram0:	
   308                           ;Called with:
   309                           ;	high address of idata address in btemp 
   310                           ;	low address of idata address in btemp+1 
   311                           ;	low address of data in FSR
   312                           ;	high address + 1 of data in btemp-1
   313                           
   314  00D2  120A  118A  20CE  120A  118A  	fcall	init_fetch0
   315  00D7  0080               	movwf	0
   316  00D8  0A84               	incf	4,f
   317  00D9  0804               	movf	4,w
   318  00DA  067D               	xorwf	btemp+-1,w
   319  00DB  1903               	btfsc	3,2
   320  00DC  3400               	retlw	0
   321  00DD  0AFF               	incf	btemp+1,f
   322  00DE  1903               	btfsc	3,2
   323  00DF  0AFE               	incf	btemp,f
   324  00E0  28D2               	goto	init_ram0
   325                           
   326                           	psect	cstackCOMMON
   327  0070                     __pcstackCOMMON:
   328  0070                     ?_Count:
   329  0070                     ??_Count:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_main:	
   333                           ; 1 bytes @ 0x0
   334                           
   335                           
   336                           ; 1 bytes @ 0x0
   337  0070                     	ds	2
   338  0072                     ??_main:
   339                           
   340                           ; 1 bytes @ 0x2
   341  0072                     	ds	4
   342                           
   343                           	psect	cstackBANK0
   344  0020                     __pcstackBANK0:
   345  0020                     main@seg:
   346                           
   347                           ; 20 bytes @ 0x0
   348  0020                     	ds	20
   349  0034                     main@i:
   350                           
   351                           ; 2 bytes @ 0x14
   352  0034                     	ds	2
   353                           
   354                           	psect	maintext
   355  0023                     __pmaintext:	
   356 ;;
   357 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   358 ;;
   359 ;; *************** function _main *****************
   360 ;; Defined at:
   361 ;;		line 15 in file "Task_a.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;		None
   364 ;; Auto vars:     Size  Location     Type
   365 ;;  seg            20    0[BANK0 ] int [10]
   366 ;;  i               2   20[BANK0 ] int 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   371 ;; Tracked objects:
   372 ;;		On entry : B00/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   376 ;;      Params:         0       0       0       0       0
   377 ;;      Locals:         0      22       0       0       0
   378 ;;      Temps:          4       0       0       0       0
   379 ;;      Totals:         4      22       0       0       0
   380 ;;Total ram usage:       26 bytes
   381 ;; Hardware stack levels required when called:    1
   382 ;; This function calls:
   383 ;;		Nothing
   384 ;; This function is called by:
   385 ;;		Startup code after reset
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           
   390                           ;psect for function _main
   391  0023                     _main:
   392  0023                     l734:	
   393                           ;incstack = 0
   394                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0]
   395                           
   396                           
   397                           ;Task_a.c: 17: int i=0;
   398  0023  1283               	bcf	3,5	;RP0=0, select bank0
   399  0024  1303               	bcf	3,6	;RP1=0, select bank0
   400  0025  01B4               	clrf	main@i
   401  0026  01B5               	clrf	main@i+1
   402                           
   403                           ;Task_a.c: 18: TRISB = 0;
   404  0027  1683               	bsf	3,5	;RP0=1, select bank1
   405  0028  1303               	bcf	3,6	;RP1=0, select bank1
   406  0029  0186               	clrf	6	;volatile
   407                           
   408                           ;Task_a.c: 19: PORTB = 0;
   409  002A  1283               	bcf	3,5	;RP0=0, select bank0
   410  002B  1303               	bcf	3,6	;RP1=0, select bank0
   411  002C  0186               	clrf	6	;volatile
   412  002D                     l736:
   413                           
   414                           ;Task_a.c: 20: GIE = 1;
   415  002D  178B               	bsf	11,7	;volatile
   416  002E                     l738:
   417                           
   418                           ;Task_a.c: 21: PEIE = 1;
   419  002E  170B               	bsf	11,6	;volatile
   420  002F                     l740:
   421                           
   422                           ;Task_a.c: 22: TMR0IE = 1;
   423  002F  168B               	bsf	11,5	;volatile
   424  0030                     l742:
   425                           
   426                           ;Task_a.c: 23: OPTION_REG = 0x07;
   427  0030  3007               	movlw	7
   428  0031  1683               	bsf	3,5	;RP0=1, select bank1
   429  0032  1303               	bcf	3,6	;RP1=0, select bank1
   430  0033  0081               	movwf	1	;volatile
   431  0034                     l744:
   432                           
   433                           ;Task_a.c: 24: TMR0 = 59;
   434  0034  303B               	movlw	59
   435  0035  1283               	bcf	3,5	;RP0=0, select bank0
   436  0036  1303               	bcf	3,6	;RP1=0, select bank0
   437  0037  0081               	movwf	1	;volatile
   438  0038                     l746:
   439                           
   440                           ;Task_a.c: 25: int seg[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
   441  0038  3020               	movlw	main@seg& (0+255)
   442  0039  0084               	movwf	4
   443  003A  3036               	movlw	low main@F1308
   444  003B  00F2               	movwf	??_main
   445  003C  0804               	movf	4,w
   446  003D  00F3               	movwf	??_main+1
   447  003E  3014               	movlw	20
   448  003F  00F4               	movwf	??_main+2
   449  0040                     u50:
   450  0040  0872               	movf	??_main,w
   451  0041  0084               	movwf	4
   452  0042  1383               	bcf	3,7	;select IRP bank0
   453  0043  0800               	movf	0,w
   454  0044  00F5               	movwf	??_main+3
   455  0045  0AF2               	incf	??_main,f
   456  0046  0873               	movf	??_main+1,w
   457  0047  0084               	movwf	4
   458  0048  0875               	movf	??_main+3,w
   459  0049  0080               	movwf	0
   460  004A  0AF3               	incf	??_main+1,f
   461  004B  0BF4               	decfsz	??_main+2,f
   462  004C  2840               	goto	u50
   463  004D                     l748:
   464                           
   465                           ;Task_a.c: 29: if(count == 100)
   466  004D  3064               	movlw	100
   467  004E  064A               	xorwf	_count,w
   468  004F  044B               	iorwf	_count+1,w
   469  0050  1D03               	btfss	3,2
   470  0051  2853               	goto	u61
   471  0052  2854               	goto	u60
   472  0053                     u61:
   473  0053  287E               	goto	l778
   474  0054                     u60:
   475  0054                     l750:
   476                           
   477                           ;Task_a.c: 30: {;Task_a.c: 31: i++;
   478  0054  3001               	movlw	1
   479  0055  07B4               	addwf	main@i,f
   480  0056  1803               	skipnc
   481  0057  0AB5               	incf	main@i+1,f
   482  0058  3000               	movlw	0
   483  0059  07B5               	addwf	main@i+1,f
   484  005A                     l752:
   485                           
   486                           ;Task_a.c: 32: count = 0;
   487  005A  01CA               	clrf	_count
   488  005B  01CB               	clrf	_count+1
   489  005C  287E               	goto	l778
   490  005D                     l754:
   491                           
   492                           ;Task_a.c: 38: PORTB = seg[0];
   493  005D  0820               	movf	main@seg,w
   494  005E  0086               	movwf	6	;volatile
   495                           
   496                           ;Task_a.c: 39: break;
   497  005F  284D               	goto	l748
   498  0060                     l756:
   499                           
   500                           ;Task_a.c: 41: PORTB = seg[1];
   501  0060  0822               	movf	main@seg+2,w
   502  0061  0086               	movwf	6	;volatile
   503                           
   504                           ;Task_a.c: 42: break;
   505  0062  284D               	goto	l748
   506  0063                     l758:
   507                           
   508                           ;Task_a.c: 44: PORTB = seg[2];
   509  0063  0824               	movf	main@seg+4,w
   510  0064  0086               	movwf	6	;volatile
   511                           
   512                           ;Task_a.c: 45: break;
   513  0065  284D               	goto	l748
   514  0066                     l760:
   515                           
   516                           ;Task_a.c: 47: PORTB = seg[3];
   517  0066  0826               	movf	main@seg+6,w
   518  0067  0086               	movwf	6	;volatile
   519                           
   520                           ;Task_a.c: 48: break;
   521  0068  284D               	goto	l748
   522  0069                     l762:
   523                           
   524                           ;Task_a.c: 50: PORTB = seg[4];
   525  0069  0828               	movf	main@seg+8,w
   526  006A  0086               	movwf	6	;volatile
   527                           
   528                           ;Task_a.c: 51: break;
   529  006B  284D               	goto	l748
   530  006C                     l764:
   531                           
   532                           ;Task_a.c: 53: PORTB = seg[5];
   533  006C  082A               	movf	main@seg+10,w
   534  006D  0086               	movwf	6	;volatile
   535                           
   536                           ;Task_a.c: 54: break;
   537  006E  284D               	goto	l748
   538  006F                     l766:
   539                           
   540                           ;Task_a.c: 56: PORTB = seg[6];
   541  006F  082C               	movf	main@seg+12,w
   542  0070  0086               	movwf	6	;volatile
   543                           
   544                           ;Task_a.c: 57: break;
   545  0071  284D               	goto	l748
   546  0072                     l768:
   547                           
   548                           ;Task_a.c: 59: PORTB = seg[7];
   549  0072  082E               	movf	main@seg+14,w
   550  0073  0086               	movwf	6	;volatile
   551                           
   552                           ;Task_a.c: 60: break;
   553  0074  284D               	goto	l748
   554  0075                     l770:
   555                           
   556                           ;Task_a.c: 62: PORTB = seg[8];
   557  0075  0830               	movf	main@seg+16,w
   558  0076  0086               	movwf	6	;volatile
   559                           
   560                           ;Task_a.c: 63: break;
   561  0077  284D               	goto	l748
   562  0078                     l772:
   563                           
   564                           ;Task_a.c: 65: PORTB = seg[9];
   565  0078  0832               	movf	main@seg+18,w
   566  0079  0086               	movwf	6	;volatile
   567                           
   568                           ;Task_a.c: 66: break;
   569  007A  284D               	goto	l748
   570  007B                     l774:
   571                           
   572                           ;Task_a.c: 68: i=0;
   573  007B  01B4               	clrf	main@i
   574  007C  01B5               	clrf	main@i+1
   575                           
   576                           ;Task_a.c: 69: break;
   577  007D  284D               	goto	l748
   578  007E                     l778:
   579                           
   580                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   581                           ; Switch size 1, requested type "simple"
   582                           ; Number of cases is 1, Range of values is 0 to 0
   583                           ; switch strategies available:
   584                           ; Name         Instructions Cycles
   585                           ; simple_byte            4     3 (average)
   586                           ; direct_byte           11     8 (fixed)
   587                           ; jumptable            260     6 (fixed)
   588                           ;	Chosen strategy is simple_byte
   589  007E  0835               	movf	main@i+1,w
   590  007F  3A00               	xorlw	0	; case 0
   591  0080  1903               	skipnz
   592  0081  2883               	goto	l816
   593  0082  287B               	goto	l774
   594  0083                     l816:
   595                           
   596                           ; Switch size 1, requested type "simple"
   597                           ; Number of cases is 10, Range of values is 0 to 9
   598                           ; switch strategies available:
   599                           ; Name         Instructions Cycles
   600                           ; simple_byte           31    16 (average)
   601                           ; direct_byte           38     8 (fixed)
   602                           ; jumptable            260     6 (fixed)
   603                           ;	Chosen strategy is simple_byte
   604  0083  0834               	movf	main@i,w
   605  0084  3A00               	xorlw	0	; case 0
   606  0085  1903               	skipnz
   607  0086  285D               	goto	l754
   608  0087  3A01               	xorlw	1	; case 1
   609  0088  1903               	skipnz
   610  0089  2860               	goto	l756
   611  008A  3A03               	xorlw	3	; case 2
   612  008B  1903               	skipnz
   613  008C  2863               	goto	l758
   614  008D  3A01               	xorlw	1	; case 3
   615  008E  1903               	skipnz
   616  008F  2866               	goto	l760
   617  0090  3A07               	xorlw	7	; case 4
   618  0091  1903               	skipnz
   619  0092  2869               	goto	l762
   620  0093  3A01               	xorlw	1	; case 5
   621  0094  1903               	skipnz
   622  0095  286C               	goto	l764
   623  0096  3A03               	xorlw	3	; case 6
   624  0097  1903               	skipnz
   625  0098  286F               	goto	l766
   626  0099  3A01               	xorlw	1	; case 7
   627  009A  1903               	skipnz
   628  009B  2872               	goto	l768
   629  009C  3A0F               	xorlw	15	; case 8
   630  009D  1903               	skipnz
   631  009E  2875               	goto	l770
   632  009F  3A01               	xorlw	1	; case 9
   633  00A0  1903               	skipnz
   634  00A1  2878               	goto	l772
   635  00A2  287B               	goto	l774
   636  00A3  120A  118A  280C   	ljmp	start
   637  00A6                     __end_of_main:
   638                           
   639                           	psect	text1
   640  00BA                     __ptext1:	
   641 ;; *************** function _Count *****************
   642 ;; Defined at:
   643 ;;		line 6 in file "Task_a.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;		None
   646 ;; Auto vars:     Size  Location     Type
   647 ;;		None
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   657 ;;      Params:         0       0       0       0       0
   658 ;;      Locals:         0       0       0       0       0
   659 ;;      Temps:          2       0       0       0       0
   660 ;;      Totals:         2       0       0       0       0
   661 ;;Total ram usage:        2 bytes
   662 ;; Hardware stack levels used:    1
   663 ;; This function calls:
   664 ;;		Nothing
   665 ;; This function is called by:
   666 ;;		Interrupt level 1
   667 ;; This function uses a non-reentrant model
   668 ;;
   669                           
   670                           
   671                           ;psect for function _Count
   672  00BA                     _Count:
   673  00BA                     i1l728:
   674                           
   675                           ;Task_a.c: 8: if(TMR0IF == 1)
   676  00BA  1D0B               	btfss	11,2	;volatile
   677  00BB  28BD               	goto	u4_21
   678  00BC  28BE               	goto	u4_20
   679  00BD                     u4_21:
   680  00BD  28C7               	goto	i1l24
   681  00BE                     u4_20:
   682  00BE                     i1l730:
   683                           
   684                           ;Task_a.c: 9: {;Task_a.c: 10: count++;
   685  00BE  3001               	movlw	1
   686  00BF  1283               	bcf	3,5	;RP0=0, select bank0
   687  00C0  1303               	bcf	3,6	;RP1=0, select bank0
   688  00C1  07CA               	addwf	_count,f
   689  00C2  1803               	skipnc
   690  00C3  0ACB               	incf	_count+1,f
   691  00C4  3000               	movlw	0
   692  00C5  07CB               	addwf	_count+1,f
   693  00C6                     i1l732:
   694                           
   695                           ;Task_a.c: 11: TMR0IF = 0;
   696  00C6  110B               	bcf	11,2	;volatile
   697  00C7                     i1l24:
   698  00C7  0871               	movf	??_Count+1,w
   699  00C8  008A               	movwf	10
   700  00C9  0E70               	swapf	??_Count,w
   701  00CA  0083               	movwf	3
   702  00CB  0EFE               	swapf	btemp,f
   703  00CC  0E7E               	swapf	btemp,w
   704  00CD  0009               	retfie
   705  00CE                     __end_of_Count:
   706  007E                     btemp	set	126	;btemp
   707  007E                     wtemp0	set	126
   708                           
   709                           	psect	intentry
   710  0004                     __pintentry:	
   711                           ;incstack = 0
   712                           ; Regs used in _Count: [wreg]
   713                           
   714  0004                     interrupt_function:
   715  007E                     saved_w	set	btemp
   716  0004  00FE               	movwf	btemp
   717  0005  0E03               	swapf	3,w
   718  0006  00F0               	movwf	??_Count
   719  0007  080A               	movf	10,w
   720  0008  00F1               	movwf	??_Count+1
   721  0009  120A  118A  28BA   	ljmp	_Count

Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80     22      44
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Count in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Count in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Count in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Count in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Count in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0     255
                                              2 COMMON     4     4      0
                                              0 BANK0     22    22      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _Count                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _Count (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       6       1       42.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      32      12        0.0%
ABS                  0      0      32       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Jan 29 21:48:07 2021

                      pc 0002                       u50 0040                       u60 0054  
                     u61 0053                       fsr 0004                      l740 002F  
                    l750 0054                      l742 0030                      l734 0023  
                    l816 0083                      l760 0066                      l752 005A  
                    l744 0034                      l736 002D                      l770 0075  
                    l762 0069                      l754 005D                      l746 0038  
                    l738 002E                      l772 0078                      l764 006C  
                    l756 0060                      l748 004D                      l774 007B  
                    l766 006F                      l758 0063                      l768 0072  
                    l778 007E                      _GIE 005F                      fsr0 0004  
                    indf 0000                     _PEIE 005E                     i1l24 00C7  
                   _TMR0 0001                     u4_20 00BE                     u4_21 00BD  
                   _main 0023                     btemp 007E                     start 000C  
                  ?_main 0070                    i1l730 00BE                    i1l732 00C6  
                  i1l728 00BA                    _PORTB 0006                    _TRISB 0086  
                  _Count 00BA                    _count 004A                    main@i 0034  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 00A6                   ??_main 0072  
                 ?_Count 0070                   _TMR0IE 005D                   _TMR0IF 005A  
                 saved_w 007E  __end_of__initialization 001F            __end_of_Count 00CE  
         __pcstackCOMMON 0070             __pidataBANK0 00A6                  ??_Count 0070  
             __pbssBANK0 004A               __pmaintext 0023               __pintentry 0004  
                __ptext1 00BA                  main@seg 0020     end_of_initialization 001F  
    start_initialization 000F               init_fetch0 00CE              __pdataBANK0 0036  
              ___latbits 0002            __pcstackBANK0 0020           __size_of_Count 0014  
      interrupt_function 0004                main@F1308 0036            __size_of_main 0083  
               init_ram0 00D2                 intlevel1 0000               _OPTION_REG 0081  
