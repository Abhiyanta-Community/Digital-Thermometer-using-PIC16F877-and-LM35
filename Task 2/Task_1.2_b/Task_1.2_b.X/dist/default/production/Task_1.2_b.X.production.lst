

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Jan 31 21:08:58 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.31
    23                           ; Generated 13/10/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173                           
   174                           	psect	idataBANK0
   175  0286                     __pidataBANK0:
   176                           
   177                           ;initializer for main@F897
   178  0286  343F               	retlw	63
   179  0287  3400               	retlw	0
   180  0288  3406               	retlw	6
   181  0289  3400               	retlw	0
   182  028A  345B               	retlw	91
   183  028B  3400               	retlw	0
   184  028C  344F               	retlw	79
   185  028D  3400               	retlw	0
   186  028E  3466               	retlw	102
   187  028F  3400               	retlw	0
   188  0290  346D               	retlw	109
   189  0291  3400               	retlw	0
   190  0292  347D               	retlw	125
   191  0293  3400               	retlw	0
   192  0294  3407               	retlw	7
   193  0295  3400               	retlw	0
   194  0296  347F               	retlw	127
   195  0297  3400               	retlw	0
   196  0298  346F               	retlw	111
   197  0299  3400               	retlw	0
   198                           
   199                           	psect	strings
   200  02AE                     __pstrings:
   201  02AE                     stringtab:
   202  02AE                     __stringtab:
   203  02AE                     stringcode:	
   204                           ;	String table - string pointers are 1 byte each
   205                           
   206  02AE                     stringdir:
   207  02AE  3002               	movlw	high stringdir
   208  02AF  008A               	movwf	10
   209  02B0  0804               	movf	4,w
   210  02B1  0A84               	incf	4,f
   211  02B2  0782               	addwf	2,f
   212  02B3                     __stringbase:
   213  02B3  3400               	retlw	0
   214  02B4                     __end_of__stringtab:
   215  02B4                     _dpowers:
   216  02B4  3401               	retlw	1
   217  02B5  3400               	retlw	0
   218  02B6  340A               	retlw	10
   219  02B7  3400               	retlw	0
   220  02B8  3464               	retlw	100
   221  02B9  3400               	retlw	0
   222  02BA  34E8               	retlw	232
   223  02BB  3403               	retlw	3
   224  02BC  3410               	retlw	16
   225  02BD  3427               	retlw	39
   226  02BE                     __end_of_dpowers:
   227  0009                     _PORTE	set	9
   228  0001                     _TMR0	set	1
   229  0006                     _PORTB	set	6
   230  000E                     _TMR1L	set	14
   231  000F                     _TMR1H	set	15
   232  0010                     _T1CON	set	16
   233  004A                     _RE2	set	74
   234  0049                     _RE1	set	73
   235  0048                     _RE0	set	72
   236  005D                     _TMR0IE	set	93
   237  005E                     _PEIE	set	94
   238  005F                     _GIE	set	95
   239  0060                     _TMR1IF	set	96
   240  0080                     _TMR1ON	set	128
   241  005A                     _TMR0IF	set	90
   242  0089                     _TRISE	set	137
   243  0081                     _OPTION_REG	set	129
   244  0086                     _TRISB	set	134
   245  02BE                     STR_1:
   246  02BE  3425               	retlw	37	;'%'
   247  02BF  3464               	retlw	100	;'d'
   248  02C0  3400               	retlw	0
   249                           
   250                           	psect	cinit
   251  000F                     start_initialization:	
   252                           ; #config settings
   253                           
   254  000F                     __initialization:
   255                           
   256                           ; Initialize objects allocated to BANK0
   257  000F  1383               	bcf	3,7	;select IRP bank0
   258  0010  305E               	movlw	low (__pdataBANK0+20)
   259  0011  00FD               	movwf	btemp+-1
   260  0012  3002               	movlw	high __pidataBANK0
   261  0013  00FE               	movwf	btemp
   262  0014  3086               	movlw	low __pidataBANK0
   263  0015  00FF               	movwf	btemp+1
   264  0016  304A               	movlw	low __pdataBANK0
   265  0017  0084               	movwf	4
   266  0018  120A  118A  22C5  120A  118A  	fcall	init_ram0
   267                           
   268                           ; Clear objects allocated to BANK0
   269  001D  01DE               	clrf	__pbssBANK0& (0+127)
   270  001E  01DF               	clrf	(__pbssBANK0+1)& (0+127)
   271  001F                     end_of_initialization:	
   272                           ;End of C runtime variable initialization code
   273                           
   274  001F                     __end_of__initialization:
   275  001F  0183               	clrf	3
   276  0020  120A  118A  2823   	ljmp	_main	;jump to C main() function
   277                           
   278                           	psect	bssBANK0
   279  005E                     __pbssBANK0:
   280  005E                     _count:
   281  005E                     	ds	2
   282                           
   283                           	psect	dataBANK0
   284  004A                     __pdataBANK0:
   285  004A                     main@F897:
   286  004A                     	ds	20
   287                           
   288                           	psect	inittext
   289  02C1                     init_fetch0:	
   290                           ;	Called with low address in FSR and high address in W
   291                           
   292  02C1  087E               	movf	btemp,w
   293  02C2  008A               	movwf	10
   294  02C3  087F               	movf	btemp+1,w
   295  02C4  0082               	movwf	2
   296  02C5                     init_ram0:	
   297                           ;Called with:
   298                           ;	high address of idata address in btemp 
   299                           ;	low address of idata address in btemp+1 
   300                           ;	low address of data in FSR
   301                           ;	high address + 1 of data in btemp-1
   302                           
   303  02C5  120A  118A  22C1  120A  118A  	fcall	init_fetch0
   304  02CA  0080               	movwf	0
   305  02CB  0A84               	incf	4,f
   306  02CC  0804               	movf	4,w
   307  02CD  067D               	xorwf	btemp+-1,w
   308  02CE  1903               	btfsc	3,2
   309  02CF  3400               	retlw	0
   310  02D0  0AFF               	incf	btemp+1,f
   311  02D1  1903               	btfsc	3,2
   312  02D2  0AFE               	incf	btemp,f
   313  02D3  2AC5               	goto	init_ram0
   314                           
   315                           	psect	cstackCOMMON
   316  0070                     __pcstackCOMMON:
   317  0070                     ?_putch:
   318  0070                     ?_Count:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ??_Count:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_Timer1Delay:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_main:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     putch@c:	
   331                           ; 1 bytes @ 0x0
   332                           
   333                           
   334                           ; 1 bytes @ 0x0
   335  0070                     	ds	2
   336  0072                     ??_putch:
   337  0072                     ??_Timer1Delay:	
   338                           ; 1 bytes @ 0x2
   339                           
   340  0072                     ?___lwdiv:	
   341                           ; 1 bytes @ 0x2
   342                           
   343  0072                     Timer1Delay@j:	
   344                           ; 2 bytes @ 0x2
   345                           
   346  0072                     ___lwdiv@divisor:	
   347                           ; 2 bytes @ 0x2
   348                           
   349                           
   350                           ; 2 bytes @ 0x2
   351  0072                     	ds	2
   352  0074                     ___lwdiv@dividend:
   353                           
   354                           ; 2 bytes @ 0x4
   355  0074                     	ds	2
   356  0076                     ??___lwdiv:
   357                           
   358                           ; 1 bytes @ 0x6
   359  0076                     	ds	1
   360  0077                     ___lwdiv@quotient:
   361                           
   362                           ; 2 bytes @ 0x7
   363  0077                     	ds	2
   364  0079                     ___lwdiv@counter:
   365                           
   366                           ; 1 bytes @ 0x9
   367  0079                     	ds	1
   368  007A                     ??___lwmod:
   369                           
   370                           ; 1 bytes @ 0xA
   371  007A                     	ds	1
   372  007B                     ___lwmod@counter:
   373                           
   374                           ; 1 bytes @ 0xB
   375  007B                     	ds	1
   376                           
   377                           	psect	cstackBANK0
   378  0020                     __pcstackBANK0:
   379  0020                     ?___lwmod:
   380  0020                     ___lwmod@divisor:	
   381                           ; 2 bytes @ 0x0
   382                           
   383                           
   384                           ; 2 bytes @ 0x0
   385  0020                     	ds	2
   386  0022                     ___lwmod@dividend:
   387                           
   388                           ; 2 bytes @ 0x2
   389  0022                     	ds	2
   390  0024                     ?_printf:
   391                           
   392                           ; 2 bytes @ 0x4
   393  0024                     	ds	2
   394  0026                     ??_printf:
   395                           
   396                           ; 1 bytes @ 0x6
   397  0026                     	ds	3
   398  0029                     printf@ap:
   399                           
   400                           ; 1 bytes @ 0x9
   401  0029                     	ds	1
   402  002A                     printf@flag:
   403                           
   404                           ; 1 bytes @ 0xA
   405  002A                     	ds	1
   406  002B                     printf@prec:
   407                           
   408                           ; 1 bytes @ 0xB
   409  002B                     	ds	1
   410  002C                     printf@f:
   411                           
   412                           ; 1 bytes @ 0xC
   413  002C                     	ds	1
   414  002D                     printf@val:
   415                           
   416                           ; 2 bytes @ 0xD
   417  002D                     	ds	2
   418  002F                     printf@c:
   419                           
   420                           ; 1 bytes @ 0xF
   421  002F                     	ds	1
   422  0030                     ??_main:
   423                           
   424                           ; 1 bytes @ 0x10
   425  0030                     	ds	4
   426  0034                     main@seg:
   427                           
   428                           ; 20 bytes @ 0x14
   429  0034                     	ds	20
   430  0048                     main@i:
   431                           
   432                           ; 2 bytes @ 0x28
   433  0048                     	ds	2
   434                           
   435                           	psect	maintext
   436  0023                     __pmaintext:	
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 33 in file "Task_b.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;  seg            20   20[BANK0 ] int [10]
   447 ;;  i               2   40[BANK0 ] int 
   448 ;;  j               2    0        int 
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : B00/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   458 ;;      Params:         0       0       0       0       0
   459 ;;      Locals:         0      22       0       0       0
   460 ;;      Temps:          0       4       0       0       0
   461 ;;      Totals:         0      26       0       0       0
   462 ;;Total ram usage:       26 bytes
   463 ;; Hardware stack levels required when called:    3
   464 ;; This function calls:
   465 ;;		_Timer1Delay
   466 ;;		_printf
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           
   473                           ;psect for function _main
   474  0023                     _main:
   475  0023                     l1038:	
   476                           ;incstack = 0
   477                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   478                           
   479                           
   480                           ;Task_b.c: 35: int j,i=0;
   481  0023  1283               	bcf	3,5	;RP0=0, select bank0
   482  0024  1303               	bcf	3,6	;RP1=0, select bank0
   483  0025  01C8               	clrf	main@i
   484  0026  01C9               	clrf	main@i+1
   485                           
   486                           ;Task_b.c: 36: TRISB = 0;
   487  0027  1683               	bsf	3,5	;RP0=1, select bank1
   488  0028  1303               	bcf	3,6	;RP1=0, select bank1
   489  0029  0186               	clrf	6	;volatile
   490                           
   491                           ;Task_b.c: 37: PORTB = 0;
   492  002A  1283               	bcf	3,5	;RP0=0, select bank0
   493  002B  1303               	bcf	3,6	;RP1=0, select bank0
   494  002C  0186               	clrf	6	;volatile
   495  002D                     l1040:
   496                           
   497                           ;Task_b.c: 38: GIE = 1;
   498  002D  178B               	bsf	11,7	;volatile
   499  002E                     l1042:
   500                           
   501                           ;Task_b.c: 39: PEIE = 1;
   502  002E  170B               	bsf	11,6	;volatile
   503  002F                     l1044:
   504                           
   505                           ;Task_b.c: 40: TMR0IE = 1;
   506  002F  168B               	bsf	11,5	;volatile
   507  0030                     l1046:
   508                           
   509                           ;Task_b.c: 41: OPTION_REG = 0x07;
   510  0030  3007               	movlw	7
   511  0031  1683               	bsf	3,5	;RP0=1, select bank1
   512  0032  1303               	bcf	3,6	;RP1=0, select bank1
   513  0033  0081               	movwf	1	;volatile
   514  0034                     l1048:
   515                           
   516                           ;Task_b.c: 42: TMR0 = 59;
   517  0034  303B               	movlw	59
   518  0035  1283               	bcf	3,5	;RP0=0, select bank0
   519  0036  1303               	bcf	3,6	;RP1=0, select bank0
   520  0037  0081               	movwf	1	;volatile
   521                           
   522                           ;Task_b.c: 43: TRISE=0X00;
   523  0038  1683               	bsf	3,5	;RP0=1, select bank1
   524  0039  1303               	bcf	3,6	;RP1=0, select bank1
   525  003A  0189               	clrf	9	;volatile
   526                           
   527                           ;Task_b.c: 44: PORTE=0X00;
   528  003B  1283               	bcf	3,5	;RP0=0, select bank0
   529  003C  1303               	bcf	3,6	;RP1=0, select bank0
   530  003D  0189               	clrf	9	;volatile
   531  003E                     l1050:
   532                           
   533                           ;Task_b.c: 45: int seg[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
   534  003E  3034               	movlw	main@seg& (0+255)
   535  003F  0084               	movwf	4
   536  0040  304A               	movlw	low main@F897
   537  0041  00B0               	movwf	??_main
   538  0042  0804               	movf	4,w
   539  0043  00B1               	movwf	??_main+1
   540  0044  3014               	movlw	20
   541  0045  00B2               	movwf	??_main+2
   542  0046                     u490:
   543  0046  0830               	movf	??_main,w
   544  0047  0084               	movwf	4
   545  0048  1383               	bcf	3,7	;select IRP bank0
   546  0049  0800               	movf	0,w
   547  004A  00B3               	movwf	??_main+3
   548  004B  0AB0               	incf	??_main,f
   549  004C  0831               	movf	??_main+1,w
   550  004D  0084               	movwf	4
   551  004E  0833               	movf	??_main+3,w
   552  004F  0080               	movwf	0
   553  0050  0AB1               	incf	??_main+1,f
   554  0051  0BB2               	decfsz	??_main+2,f
   555  0052  2846               	goto	u490
   556  0053                     l1052:
   557                           
   558                           ;Task_b.c: 48: if(count == 100)
   559  0053  3064               	movlw	100
   560  0054  1283               	bcf	3,5	;RP0=0, select bank0
   561  0055  1303               	bcf	3,6	;RP1=0, select bank0
   562  0056  065E               	xorwf	_count,w
   563  0057  045F               	iorwf	_count+1,w
   564  0058  1D03               	btfss	3,2
   565  0059  285B               	goto	u501
   566  005A  285C               	goto	u500
   567  005B                     u501:
   568  005B  2883               	goto	l1084
   569  005C                     u500:
   570  005C                     l1054:
   571                           
   572                           ;Task_b.c: 49: {;Task_b.c: 50: i++;
   573  005C  3001               	movlw	1
   574  005D  07C8               	addwf	main@i,f
   575  005E  1803               	skipnc
   576  005F  0AC9               	incf	main@i+1,f
   577  0060  3000               	movlw	0
   578  0061  07C9               	addwf	main@i+1,f
   579  0062                     l1056:
   580                           
   581                           ;Task_b.c: 51: count = 0;
   582  0062  01DE               	clrf	_count
   583  0063  01DF               	clrf	_count+1
   584  0064  2883               	goto	l1084
   585  0065                     l1058:
   586                           
   587                           ;Task_b.c: 57: PORTB = seg[0];
   588  0065  0834               	movf	main@seg,w
   589  0066  0086               	movwf	6	;volatile
   590                           
   591                           ;Task_b.c: 58: break;
   592  0067  28A8               	goto	l65
   593  0068                     l1060:
   594                           
   595                           ;Task_b.c: 60: PORTB = seg[1];
   596  0068  0836               	movf	main@seg+2,w
   597  0069  0086               	movwf	6	;volatile
   598                           
   599                           ;Task_b.c: 61: break;
   600  006A  28A8               	goto	l65
   601  006B                     l1062:
   602                           
   603                           ;Task_b.c: 63: PORTB = seg[2];
   604  006B  0838               	movf	main@seg+4,w
   605  006C  0086               	movwf	6	;volatile
   606                           
   607                           ;Task_b.c: 64: break;
   608  006D  28A8               	goto	l65
   609  006E                     l1064:
   610                           
   611                           ;Task_b.c: 66: PORTB = seg[3];
   612  006E  083A               	movf	main@seg+6,w
   613  006F  0086               	movwf	6	;volatile
   614                           
   615                           ;Task_b.c: 67: break;
   616  0070  28A8               	goto	l65
   617  0071                     l1066:
   618                           
   619                           ;Task_b.c: 69: PORTB = seg[4];
   620  0071  083C               	movf	main@seg+8,w
   621  0072  0086               	movwf	6	;volatile
   622                           
   623                           ;Task_b.c: 70: break;
   624  0073  28A8               	goto	l65
   625  0074                     l1068:
   626                           
   627                           ;Task_b.c: 72: PORTB = seg[5];
   628  0074  083E               	movf	main@seg+10,w
   629  0075  0086               	movwf	6	;volatile
   630                           
   631                           ;Task_b.c: 73: break;
   632  0076  28A8               	goto	l65
   633  0077                     l1070:
   634                           
   635                           ;Task_b.c: 75: PORTB = seg[6];
   636  0077  0840               	movf	main@seg+12,w
   637  0078  0086               	movwf	6	;volatile
   638                           
   639                           ;Task_b.c: 76: break;
   640  0079  28A8               	goto	l65
   641  007A                     l1072:
   642                           
   643                           ;Task_b.c: 78: PORTB = seg[7];
   644  007A  0842               	movf	main@seg+14,w
   645  007B  0086               	movwf	6	;volatile
   646                           
   647                           ;Task_b.c: 79: break;
   648  007C  28A8               	goto	l65
   649  007D                     l1074:
   650                           
   651                           ;Task_b.c: 81: PORTB = seg[8];
   652  007D  0844               	movf	main@seg+16,w
   653  007E  0086               	movwf	6	;volatile
   654                           
   655                           ;Task_b.c: 82: break;
   656  007F  28A8               	goto	l65
   657  0080                     l1076:
   658                           
   659                           ;Task_b.c: 84: PORTB = seg[9];
   660  0080  0846               	movf	main@seg+18,w
   661  0081  0086               	movwf	6	;volatile
   662                           
   663                           ;Task_b.c: 85: break;
   664  0082  28A8               	goto	l65
   665  0083                     l1084:
   666                           
   667                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   668                           ; Switch size 1, requested type "simple"
   669                           ; Number of cases is 1, Range of values is 0 to 0
   670                           ; switch strategies available:
   671                           ; Name         Instructions Cycles
   672                           ; simple_byte            4     3 (average)
   673                           ; direct_byte           11     8 (fixed)
   674                           ; jumptable            260     6 (fixed)
   675                           ;	Chosen strategy is simple_byte
   676  0083  0849               	movf	main@i+1,w
   677  0084  3A00               	xorlw	0	; case 0
   678  0085  1903               	skipnz
   679  0086  2888               	goto	l1146
   680  0087  28A8               	goto	l65
   681  0088                     l1146:
   682                           
   683                           ; Switch size 1, requested type "simple"
   684                           ; Number of cases is 10, Range of values is 0 to 9
   685                           ; switch strategies available:
   686                           ; Name         Instructions Cycles
   687                           ; simple_byte           31    16 (average)
   688                           ; direct_byte           38     8 (fixed)
   689                           ; jumptable            260     6 (fixed)
   690                           ;	Chosen strategy is simple_byte
   691  0088  0848               	movf	main@i,w
   692  0089  3A00               	xorlw	0	; case 0
   693  008A  1903               	skipnz
   694  008B  2865               	goto	l1058
   695  008C  3A01               	xorlw	1	; case 1
   696  008D  1903               	skipnz
   697  008E  2868               	goto	l1060
   698  008F  3A03               	xorlw	3	; case 2
   699  0090  1903               	skipnz
   700  0091  286B               	goto	l1062
   701  0092  3A01               	xorlw	1	; case 3
   702  0093  1903               	skipnz
   703  0094  286E               	goto	l1064
   704  0095  3A07               	xorlw	7	; case 4
   705  0096  1903               	skipnz
   706  0097  2871               	goto	l1066
   707  0098  3A01               	xorlw	1	; case 5
   708  0099  1903               	skipnz
   709  009A  2874               	goto	l1068
   710  009B  3A03               	xorlw	3	; case 6
   711  009C  1903               	skipnz
   712  009D  2877               	goto	l1070
   713  009E  3A01               	xorlw	1	; case 7
   714  009F  1903               	skipnz
   715  00A0  287A               	goto	l1072
   716  00A1  3A0F               	xorlw	15	; case 8
   717  00A2  1903               	skipnz
   718  00A3  287D               	goto	l1074
   719  00A4  3A01               	xorlw	1	; case 9
   720  00A5  1903               	skipnz
   721  00A6  2880               	goto	l1076
   722  00A7  28A8               	goto	l65
   723  00A8                     l65:
   724                           
   725                           ;Task_b.c: 92: RE0=1;
   726  00A8  1409               	bsf	9,0	;volatile
   727  00A9                     l1086:
   728                           
   729                           ;Task_b.c: 93: Timer1Delay();
   730  00A9  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   731  00AE                     l1088:
   732                           
   733                           ;Task_b.c: 94: RE0=0;
   734  00AE  1283               	bcf	3,5	;RP0=0, select bank0
   735  00AF  1303               	bcf	3,6	;RP1=0, select bank0
   736  00B0  1009               	bcf	9,0	;volatile
   737                           
   738                           ;Task_b.c: 95: Timer1Delay();
   739  00B1  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   740  00B6                     l1090:
   741                           
   742                           ;Task_b.c: 97: RE1=1;
   743  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   744  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   745  00B8  1489               	bsf	9,1	;volatile
   746                           
   747                           ;Task_b.c: 98: Timer1Delay();
   748  00B9  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   749  00BE                     l1092:
   750                           
   751                           ;Task_b.c: 99: RE1=0;
   752  00BE  1283               	bcf	3,5	;RP0=0, select bank0
   753  00BF  1303               	bcf	3,6	;RP1=0, select bank0
   754  00C0  1089               	bcf	9,1	;volatile
   755                           
   756                           ;Task_b.c: 100: Timer1Delay();
   757  00C1  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   758  00C6                     l1094:
   759                           
   760                           ;Task_b.c: 102: RE2=1;
   761  00C6  1283               	bcf	3,5	;RP0=0, select bank0
   762  00C7  1303               	bcf	3,6	;RP1=0, select bank0
   763  00C8  1509               	bsf	9,2	;volatile
   764                           
   765                           ;Task_b.c: 103: Timer1Delay();
   766  00C9  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   767  00CE                     l1096:
   768                           
   769                           ;Task_b.c: 104: RE2=0;
   770  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   771  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   772  00D0  1109               	bcf	9,2	;volatile
   773                           
   774                           ;Task_b.c: 105: Timer1Delay();
   775  00D1  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   776  00D6                     l1098:
   777                           
   778                           ;Task_b.c: 107: RE2=1;
   779  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   780  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   781  00D8  1509               	bsf	9,2	;volatile
   782                           
   783                           ;Task_b.c: 108: Timer1Delay();
   784  00D9  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   785  00DE                     l1100:
   786                           
   787                           ;Task_b.c: 109: RE2=0;
   788  00DE  1283               	bcf	3,5	;RP0=0, select bank0
   789  00DF  1303               	bcf	3,6	;RP1=0, select bank0
   790  00E0  1109               	bcf	9,2	;volatile
   791                           
   792                           ;Task_b.c: 110: Timer1Delay();
   793  00E1  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   794  00E6                     l1102:
   795                           
   796                           ;Task_b.c: 112: RE1=1;
   797  00E6  1283               	bcf	3,5	;RP0=0, select bank0
   798  00E7  1303               	bcf	3,6	;RP1=0, select bank0
   799  00E8  1489               	bsf	9,1	;volatile
   800                           
   801                           ;Task_b.c: 113: Timer1Delay();
   802  00E9  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   803  00EE                     l1104:
   804                           
   805                           ;Task_b.c: 114: RE1=0;
   806  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   807  00EF  1303               	bcf	3,6	;RP1=0, select bank0
   808  00F0  1089               	bcf	9,1	;volatile
   809                           
   810                           ;Task_b.c: 115: Timer1Delay();
   811  00F1  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   812  00F6                     l1106:
   813                           
   814                           ;Task_b.c: 117: RE0=1;
   815  00F6  1283               	bcf	3,5	;RP0=0, select bank0
   816  00F7  1303               	bcf	3,6	;RP1=0, select bank0
   817  00F8  1409               	bsf	9,0	;volatile
   818                           
   819                           ;Task_b.c: 118: Timer1Delay();
   820  00F9  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   821  00FE                     l1108:
   822                           
   823                           ;Task_b.c: 119: RE0=0;
   824  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   825  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   826  0100  1009               	bcf	9,0	;volatile
   827                           
   828                           ;Task_b.c: 120: Timer1Delay();
   829  0101  120A  118A  225F  120A  118A  	fcall	_Timer1Delay
   830  0106  2853               	goto	l1052
   831  0107  120A  118A  280C   	ljmp	start
   832  010A                     __end_of_main:
   833                           
   834                           	psect	text1
   835  010A                     __ptext1:	
   836 ;; *************** function _printf *****************
   837 ;; Defined at:
   838 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  f               1    wreg     PTR const unsigned char 
   841 ;;		 -> STR_1(3), 
   842 ;; Auto vars:     Size  Location     Type
   843 ;;  f               1   12[BANK0 ] PTR const unsigned char 
   844 ;;		 -> STR_1(3), 
   845 ;;  tmpval          4    0        struct .
   846 ;;  val             2   13[BANK0 ] unsigned int 
   847 ;;  cp              2    0        PTR const unsigned char 
   848 ;;  len             2    0        unsigned int 
   849 ;;  c               1   15[BANK0 ] unsigned char 
   850 ;;  prec            1   11[BANK0 ] char 
   851 ;;  flag            1   10[BANK0 ] unsigned char 
   852 ;;  ap              1    9[BANK0 ] PTR void [1]
   853 ;;		 -> ?_printf(2), 
   854 ;; Return value:  Size  Location     Type
   855 ;;                  2    4[BANK0 ] int 
   856 ;; Registers used:
   857 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   863 ;;      Params:         0       2       0       0       0
   864 ;;      Locals:         0       7       0       0       0
   865 ;;      Temps:          0       3       0       0       0
   866 ;;      Totals:         0      12       0       0       0
   867 ;;Total ram usage:       12 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; Hardware stack levels required when called:    2
   870 ;; This function calls:
   871 ;;		___lwdiv
   872 ;;		___lwmod
   873 ;;		_putch
   874 ;; This function is called by:
   875 ;;		_main
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           
   880                           ;psect for function _printf
   881  010A                     _printf:
   882                           
   883                           ;incstack = 0
   884                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   885                           ;printf@f stored from wreg
   886  010A  1283               	bcf	3,5	;RP0=0, select bank0
   887  010B  1303               	bcf	3,6	;RP1=0, select bank0
   888  010C  00AC               	movwf	printf@f
   889  010D                     l984:
   890                           
   891                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
   892  010D  3024               	movlw	(low (?_printf| 0))& (0+255)
   893  010E  00A6               	movwf	??_printf
   894  010F  0826               	movf	??_printf,w
   895  0110  00A9               	movwf	printf@ap
   896                           
   897                           ;doprnt.c: 553: while((c = *f++)) {
   898  0111  29CA               	goto	l1030
   899  0112                     l986:
   900                           
   901                           ;doprnt.c: 555: if(c != '%')
   902  0112  3025               	movlw	37
   903  0113  062F               	xorwf	printf@c,w
   904  0114  1903               	btfsc	3,2
   905  0115  2917               	goto	u411
   906  0116  2918               	goto	u410
   907  0117                     u411:
   908  0117  291F               	goto	l990
   909  0118                     u410:
   910  0118                     l988:
   911                           
   912                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
   913  0118  082F               	movf	printf@c,w
   914  0119  120A  118A  22D4  120A  118A  	fcall	_putch
   915                           
   916                           ;doprnt.c: 559: continue;
   917  011E  29CA               	goto	l1030
   918  011F                     l990:
   919                           
   920                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
   921  011F  01AA               	clrf	printf@flag
   922  0120                     l994:	
   923                           ;doprnt.c: 661: switch(c = *f++) {
   924                           
   925  0120  3001               	movlw	1
   926  0121  07AC               	addwf	printf@f,f
   927  0122  30FF               	movlw	-1
   928  0123  072C               	addwf	printf@f,w
   929  0124  0084               	movwf	4
   930  0125  120A  118A  22AE  120A  118A  	fcall	stringdir
   931  012A  00AF               	movwf	printf@c
   932                           
   933                           ; Switch size 1, requested type "simple"
   934                           ; Number of cases is 3, Range of values is 0 to 105
   935                           ; switch strategies available:
   936                           ; Name         Instructions Cycles
   937                           ; simple_byte           10     6 (average)
   938                           ; jumptable            260     6 (fixed)
   939                           ;	Chosen strategy is simple_byte
   940  012B  3A00               	xorlw	0	; case 0
   941  012C  1903               	skipnz
   942  012D  29DE               	goto	l189
   943  012E  3A64               	xorlw	100	; case 100
   944  012F  1903               	skipnz
   945  0130  2935               	goto	l996
   946  0131  3A0D               	xorlw	13	; case 105
   947  0132  1903               	skipnz
   948  0133  2935               	goto	l996
   949  0134  29CA               	goto	l1030
   950  0135                     l996:
   951                           
   952                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
   953  0135  0829               	movf	printf@ap,w
   954  0136  0084               	movwf	4
   955  0137  1383               	bcf	3,7	;select IRP bank0
   956  0138  0800               	movf	0,w
   957  0139  00AD               	movwf	printf@val
   958  013A  0A84               	incf	4,f
   959  013B  0800               	movf	0,w
   960  013C  00AE               	movwf	printf@val+1
   961  013D                     l998:
   962  013D  3002               	movlw	2
   963  013E  00A6               	movwf	??_printf
   964  013F  0826               	movf	??_printf,w
   965  0140  07A9               	addwf	printf@ap,f
   966  0141                     l1000:
   967                           
   968                           ;doprnt.c: 1287: if((int)val < 0) {
   969  0141  1FAE               	btfss	printf@val+1,7
   970  0142  2944               	goto	u421
   971  0143  2945               	goto	u420
   972  0144                     u421:
   973  0144  294E               	goto	l1006
   974  0145                     u420:
   975  0145                     l1002:
   976                           
   977                           ;doprnt.c: 1288: flag |= 0x03;
   978  0145  3003               	movlw	3
   979  0146  00A6               	movwf	??_printf
   980  0147  0826               	movf	??_printf,w
   981  0148  04AA               	iorwf	printf@flag,f
   982  0149                     l1004:
   983                           
   984                           ;doprnt.c: 1289: val = -val;
   985  0149  09AD               	comf	printf@val,f
   986  014A  09AE               	comf	printf@val+1,f
   987  014B  0AAD               	incf	printf@val,f
   988  014C  1903               	skipnz
   989  014D  0AAE               	incf	printf@val+1,f
   990  014E                     l1006:
   991                           
   992                           ;doprnt.c: 1290: };doprnt.c: 1292: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
   993  014E  01AF               	clrf	printf@c
   994  014F  0AAF               	incf	printf@c,f
   995  0150                     l1012:
   996                           
   997                           ;doprnt.c: 1332: if(val < dpowers[c])
   998  0150  082F               	movf	printf@c,w
   999  0151  00A6               	movwf	??_printf
  1000  0152  0726               	addwf	??_printf,w
  1001  0153  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1002  0154  0084               	movwf	4
  1003  0155  120A  118A  22AE  120A  118A  	fcall	stringdir
  1004  015A  00A7               	movwf	??_printf+1
  1005  015B  120A  118A  22AE  120A  118A  	fcall	stringdir
  1006  0160  00A8               	movwf	??_printf+2
  1007  0161  0828               	movf	??_printf+2,w
  1008  0162  022E               	subwf	printf@val+1,w
  1009  0163  1D03               	skipz
  1010  0164  2967               	goto	u435
  1011  0165  0827               	movf	??_printf+1,w
  1012  0166  022D               	subwf	printf@val,w
  1013  0167                     u435:
  1014  0167  1803               	skipnc
  1015  0168  296A               	goto	u431
  1016  0169  296B               	goto	u430
  1017  016A                     u431:
  1018  016A  296C               	goto	l1016
  1019  016B                     u430:
  1020  016B  2976               	goto	l1018
  1021  016C                     l1016:
  1022  016C  3001               	movlw	1
  1023  016D  00A6               	movwf	??_printf
  1024  016E  0826               	movf	??_printf,w
  1025  016F  07AF               	addwf	printf@c,f
  1026  0170  3005               	movlw	5
  1027  0171  062F               	xorwf	printf@c,w
  1028  0172  1D03               	btfss	3,2
  1029  0173  2975               	goto	u441
  1030  0174  2976               	goto	u440
  1031  0175                     u441:
  1032  0175  2950               	goto	l1012
  1033  0176                     u440:
  1034  0176                     l1018:
  1035                           
  1036                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  1037  0176  082A               	movf	printf@flag,w
  1038  0177  3903               	andlw	3
  1039  0178  1903               	btfsc	3,2
  1040  0179  297B               	goto	u451
  1041  017A  297C               	goto	u450
  1042  017B                     u451:
  1043  017B  2982               	goto	l1022
  1044  017C                     u450:
  1045  017C                     l1020:
  1046                           
  1047                           ;doprnt.c: 1465: (putch('-') );
  1048  017C  302D               	movlw	45
  1049  017D  120A  118A  22D4  120A  118A  	fcall	_putch
  1050  0182                     l1022:
  1051                           
  1052                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  1053  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0184  082F               	movf	printf@c,w
  1056  0185  00A6               	movwf	??_printf
  1057  0186  0826               	movf	??_printf,w
  1058  0187  00AB               	movwf	printf@prec
  1059                           
  1060                           ;doprnt.c: 1500: while(prec--) {
  1061  0188  29BF               	goto	l1028
  1062  0189                     l1024:
  1063                           
  1064                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1065  0189  300A               	movlw	10
  1066  018A  00A0               	movwf	___lwmod@divisor
  1067  018B  3000               	movlw	0
  1068  018C  00A1               	movwf	___lwmod@divisor+1
  1069  018D  082B               	movf	printf@prec,w
  1070  018E  00A6               	movwf	??_printf
  1071  018F  0726               	addwf	??_printf,w
  1072  0190  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1073  0191  0084               	movwf	4
  1074  0192  120A  118A  22AE  120A  118A  	fcall	stringdir
  1075  0197  00F2               	movwf	___lwdiv@divisor
  1076  0198  120A  118A  22AE  120A  118A  	fcall	stringdir
  1077  019D  00F3               	movwf	___lwdiv@divisor+1
  1078  019E  082E               	movf	printf@val+1,w
  1079  019F  00F5               	movwf	___lwdiv@dividend+1
  1080  01A0  082D               	movf	printf@val,w
  1081  01A1  00F4               	movwf	___lwdiv@dividend
  1082  01A2  120A  118A  21DF  120A  118A  	fcall	___lwdiv
  1083  01A7  0873               	movf	?___lwdiv+1,w
  1084  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1085  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  1086  01AA  00A3               	movwf	___lwmod@dividend+1
  1087  01AB  0872               	movf	?___lwdiv,w
  1088  01AC  00A2               	movwf	___lwmod@dividend
  1089  01AD  120A  118A  2223  120A  118A  	fcall	___lwmod
  1090  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1091  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1092  01B4  0820               	movf	?___lwmod,w
  1093  01B5  3E30               	addlw	48
  1094  01B6  00A7               	movwf	??_printf+1
  1095  01B7  0827               	movf	??_printf+1,w
  1096  01B8  00AF               	movwf	printf@c
  1097  01B9                     l1026:
  1098                           
  1099                           ;doprnt.c: 1549: };doprnt.c: 1550: (putch(c) );
  1100  01B9  082F               	movf	printf@c,w
  1101  01BA  120A  118A  22D4  120A  118A  	fcall	_putch
  1102  01BF                     l1028:
  1103  01BF  30FF               	movlw	255
  1104  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1105  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1106  01C2  00A6               	movwf	??_printf
  1107  01C3  0826               	movf	??_printf,w
  1108  01C4  07AB               	addwf	printf@prec,f
  1109  01C5  0A2B               	incf	printf@prec,w
  1110  01C6  1D03               	btfss	3,2
  1111  01C7  29C9               	goto	u461
  1112  01C8  29CA               	goto	u460
  1113  01C9                     u461:
  1114  01C9  2989               	goto	l1024
  1115  01CA                     u460:
  1116  01CA                     l1030:
  1117  01CA  3001               	movlw	1
  1118  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1119  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  1120  01CD  07AC               	addwf	printf@f,f
  1121  01CE  30FF               	movlw	-1
  1122  01CF  072C               	addwf	printf@f,w
  1123  01D0  0084               	movwf	4
  1124  01D1  120A  118A  22AE  120A  118A  	fcall	stringdir
  1125  01D6  00A6               	movwf	??_printf
  1126  01D7  0826               	movf	??_printf,w
  1127  01D8  00AF               	movwf	printf@c
  1128  01D9  082F               	movf	printf@c,w
  1129  01DA  1D03               	btfss	3,2
  1130  01DB  29DD               	goto	u471
  1131  01DC  29DE               	goto	u470
  1132  01DD                     u471:
  1133  01DD  2912               	goto	l986
  1134  01DE                     u470:
  1135  01DE                     l189:
  1136  01DE  0008               	return
  1137  01DF                     __end_of_printf:
  1138                           
  1139                           	psect	text2
  1140  02D4                     __ptext2:	
  1141 ;; *************** function _putch *****************
  1142 ;; Defined at:
  1143 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\putch.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  c               1    wreg     unsigned char 
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  c               1    0[COMMON] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1157 ;;      Params:         0       0       0       0       0
  1158 ;;      Locals:         0       0       0       0       0
  1159 ;;      Temps:          0       0       0       0       0
  1160 ;;      Totals:         0       0       0       0       0
  1161 ;;Total ram usage:        0 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_printf
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           
  1172                           ;psect for function _putch
  1173  02D4                     _putch:
  1174  02D4                     l644:	
  1175                           ;incstack = 0
  1176                           ; Regs used in _putch: [wreg]
  1177                           
  1178  02D4  0008               	return
  1179  02D5                     __end_of_putch:
  1180                           
  1181                           	psect	text3
  1182  0223                     __ptext3:	
  1183 ;; *************** function ___lwmod *****************
  1184 ;; Defined at:
  1185 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  divisor         2    0[BANK0 ] unsigned int 
  1188 ;;  dividend        2    2[BANK0 ] unsigned int 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  counter         1   11[COMMON] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  2    0[BANK0 ] unsigned int 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2, status,0
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1200 ;;      Params:         0       4       0       0       0
  1201 ;;      Locals:         1       0       0       0       0
  1202 ;;      Temps:          1       0       0       0       0
  1203 ;;      Totals:         2       4       0       0       0
  1204 ;;Total ram usage:        6 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; Hardware stack levels required when called:    1
  1207 ;; This function calls:
  1208 ;;		Nothing
  1209 ;; This function is called by:
  1210 ;;		_printf
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           
  1215                           ;psect for function ___lwmod
  1216  0223                     ___lwmod:
  1217  0223                     l950:	
  1218                           ;incstack = 0
  1219                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1220                           
  1221  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1222  0224  1303               	bcf	3,6	;RP1=0, select bank0
  1223  0225  0820               	movf	___lwmod@divisor,w
  1224  0226  0421               	iorwf	___lwmod@divisor+1,w
  1225  0227  1903               	btfsc	3,2
  1226  0228  2A2A               	goto	u331
  1227  0229  2A2B               	goto	u330
  1228  022A                     u331:
  1229  022A  2A5A               	goto	l968
  1230  022B                     u330:
  1231  022B                     l952:
  1232  022B  01FB               	clrf	___lwmod@counter
  1233  022C  0AFB               	incf	___lwmod@counter,f
  1234  022D  2A39               	goto	l958
  1235  022E                     l954:
  1236  022E  3001               	movlw	1
  1237  022F                     u345:
  1238  022F  1003               	clrc
  1239  0230  0DA0               	rlf	___lwmod@divisor,f
  1240  0231  0DA1               	rlf	___lwmod@divisor+1,f
  1241  0232  3EFF               	addlw	-1
  1242  0233  1D03               	skipz
  1243  0234  2A2F               	goto	u345
  1244  0235                     l956:
  1245  0235  3001               	movlw	1
  1246  0236  00FA               	movwf	??___lwmod
  1247  0237  087A               	movf	??___lwmod,w
  1248  0238  07FB               	addwf	___lwmod@counter,f
  1249  0239                     l958:
  1250  0239  1FA1               	btfss	___lwmod@divisor+1,7
  1251  023A  2A3C               	goto	u351
  1252  023B  2A3D               	goto	u350
  1253  023C                     u351:
  1254  023C  2A2E               	goto	l954
  1255  023D                     u350:
  1256  023D                     l960:
  1257  023D  0821               	movf	___lwmod@divisor+1,w
  1258  023E  0223               	subwf	___lwmod@dividend+1,w
  1259  023F  1D03               	skipz
  1260  0240  2A43               	goto	u365
  1261  0241  0820               	movf	___lwmod@divisor,w
  1262  0242  0222               	subwf	___lwmod@dividend,w
  1263  0243                     u365:
  1264  0243  1C03               	skipc
  1265  0244  2A46               	goto	u361
  1266  0245  2A47               	goto	u360
  1267  0246                     u361:
  1268  0246  2A4D               	goto	l964
  1269  0247                     u360:
  1270  0247                     l962:
  1271  0247  0820               	movf	___lwmod@divisor,w
  1272  0248  02A2               	subwf	___lwmod@dividend,f
  1273  0249  0821               	movf	___lwmod@divisor+1,w
  1274  024A  1C03               	skipc
  1275  024B  03A3               	decf	___lwmod@dividend+1,f
  1276  024C  02A3               	subwf	___lwmod@dividend+1,f
  1277  024D                     l964:
  1278  024D  3001               	movlw	1
  1279  024E                     u375:
  1280  024E  1003               	clrc
  1281  024F  0CA1               	rrf	___lwmod@divisor+1,f
  1282  0250  0CA0               	rrf	___lwmod@divisor,f
  1283  0251  3EFF               	addlw	-1
  1284  0252  1D03               	skipz
  1285  0253  2A4E               	goto	u375
  1286  0254                     l966:
  1287  0254  3001               	movlw	1
  1288  0255  02FB               	subwf	___lwmod@counter,f
  1289  0256  1D03               	btfss	3,2
  1290  0257  2A59               	goto	u381
  1291  0258  2A5A               	goto	u380
  1292  0259                     u381:
  1293  0259  2A3D               	goto	l960
  1294  025A                     u380:
  1295  025A                     l968:
  1296  025A  0823               	movf	___lwmod@dividend+1,w
  1297  025B  00A1               	movwf	?___lwmod+1
  1298  025C  0822               	movf	___lwmod@dividend,w
  1299  025D  00A0               	movwf	?___lwmod
  1300  025E                     l475:
  1301  025E  0008               	return
  1302  025F                     __end_of___lwmod:
  1303                           
  1304                           	psect	text4
  1305  01DF                     __ptext4:	
  1306 ;; *************** function ___lwdiv *****************
  1307 ;; Defined at:
  1308 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;  divisor         2    2[COMMON] unsigned int 
  1311 ;;  dividend        2    4[COMMON] unsigned int 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  quotient        2    7[COMMON] unsigned int 
  1314 ;;  counter         1    9[COMMON] unsigned char 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  2    2[COMMON] unsigned int 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2, status,0
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1324 ;;      Params:         4       0       0       0       0
  1325 ;;      Locals:         3       0       0       0       0
  1326 ;;      Temps:          1       0       0       0       0
  1327 ;;      Totals:         8       0       0       0       0
  1328 ;;Total ram usage:        8 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    1
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_printf
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           
  1339                           ;psect for function ___lwdiv
  1340  01DF                     ___lwdiv:
  1341  01DF                     l924:	
  1342                           ;incstack = 0
  1343                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1344                           
  1345  01DF  01F7               	clrf	___lwdiv@quotient
  1346  01E0  01F8               	clrf	___lwdiv@quotient+1
  1347  01E1                     l926:
  1348  01E1  0872               	movf	___lwdiv@divisor,w
  1349  01E2  0473               	iorwf	___lwdiv@divisor+1,w
  1350  01E3  1903               	btfsc	3,2
  1351  01E4  29E6               	goto	u261
  1352  01E5  29E7               	goto	u260
  1353  01E6                     u261:
  1354  01E6  2A1E               	goto	l946
  1355  01E7                     u260:
  1356  01E7                     l928:
  1357  01E7  01F9               	clrf	___lwdiv@counter
  1358  01E8  0AF9               	incf	___lwdiv@counter,f
  1359  01E9  29F5               	goto	l934
  1360  01EA                     l930:
  1361  01EA  3001               	movlw	1
  1362  01EB                     u275:
  1363  01EB  1003               	clrc
  1364  01EC  0DF2               	rlf	___lwdiv@divisor,f
  1365  01ED  0DF3               	rlf	___lwdiv@divisor+1,f
  1366  01EE  3EFF               	addlw	-1
  1367  01EF  1D03               	skipz
  1368  01F0  29EB               	goto	u275
  1369  01F1                     l932:
  1370  01F1  3001               	movlw	1
  1371  01F2  00F6               	movwf	??___lwdiv
  1372  01F3  0876               	movf	??___lwdiv,w
  1373  01F4  07F9               	addwf	___lwdiv@counter,f
  1374  01F5                     l934:
  1375  01F5  1FF3               	btfss	___lwdiv@divisor+1,7
  1376  01F6  29F8               	goto	u281
  1377  01F7  29F9               	goto	u280
  1378  01F8                     u281:
  1379  01F8  29EA               	goto	l930
  1380  01F9                     u280:
  1381  01F9                     l936:
  1382  01F9  3001               	movlw	1
  1383  01FA                     u295:
  1384  01FA  1003               	clrc
  1385  01FB  0DF7               	rlf	___lwdiv@quotient,f
  1386  01FC  0DF8               	rlf	___lwdiv@quotient+1,f
  1387  01FD  3EFF               	addlw	-1
  1388  01FE  1D03               	skipz
  1389  01FF  29FA               	goto	u295
  1390  0200  0873               	movf	___lwdiv@divisor+1,w
  1391  0201  0275               	subwf	___lwdiv@dividend+1,w
  1392  0202  1D03               	skipz
  1393  0203  2A06               	goto	u305
  1394  0204  0872               	movf	___lwdiv@divisor,w
  1395  0205  0274               	subwf	___lwdiv@dividend,w
  1396  0206                     u305:
  1397  0206  1C03               	skipc
  1398  0207  2A09               	goto	u301
  1399  0208  2A0A               	goto	u300
  1400  0209                     u301:
  1401  0209  2A11               	goto	l942
  1402  020A                     u300:
  1403  020A                     l938:
  1404  020A  0872               	movf	___lwdiv@divisor,w
  1405  020B  02F4               	subwf	___lwdiv@dividend,f
  1406  020C  0873               	movf	___lwdiv@divisor+1,w
  1407  020D  1C03               	skipc
  1408  020E  03F5               	decf	___lwdiv@dividend+1,f
  1409  020F  02F5               	subwf	___lwdiv@dividend+1,f
  1410  0210                     l940:
  1411  0210  1477               	bsf	___lwdiv@quotient,0
  1412  0211                     l942:
  1413  0211  3001               	movlw	1
  1414  0212                     u315:
  1415  0212  1003               	clrc
  1416  0213  0CF3               	rrf	___lwdiv@divisor+1,f
  1417  0214  0CF2               	rrf	___lwdiv@divisor,f
  1418  0215  3EFF               	addlw	-1
  1419  0216  1D03               	skipz
  1420  0217  2A12               	goto	u315
  1421  0218                     l944:
  1422  0218  3001               	movlw	1
  1423  0219  02F9               	subwf	___lwdiv@counter,f
  1424  021A  1D03               	btfss	3,2
  1425  021B  2A1D               	goto	u321
  1426  021C  2A1E               	goto	u320
  1427  021D                     u321:
  1428  021D  29F9               	goto	l936
  1429  021E                     u320:
  1430  021E                     l946:
  1431  021E  0878               	movf	___lwdiv@quotient+1,w
  1432  021F  00F3               	movwf	?___lwdiv+1
  1433  0220  0877               	movf	___lwdiv@quotient,w
  1434  0221  00F2               	movwf	?___lwdiv
  1435  0222                     l465:
  1436  0222  0008               	return
  1437  0223                     __end_of___lwdiv:
  1438                           
  1439                           	psect	text5
  1440  025F                     __ptext5:	
  1441 ;; *************** function _Timer1Delay *****************
  1442 ;; Defined at:
  1443 ;;		line 18 in file "Task_b.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;		None
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  j               2    2[COMMON] int 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg, status,2, btemp+1
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1457 ;;      Params:         0       0       0       0       0
  1458 ;;      Locals:         2       0       0       0       0
  1459 ;;      Temps:          0       0       0       0       0
  1460 ;;      Totals:         2       0       0       0       0
  1461 ;;Total ram usage:        2 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    1
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_main
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           
  1472                           ;psect for function _Timer1Delay
  1473  025F                     _Timer1Delay:
  1474  025F                     l972:	
  1475                           ;incstack = 0
  1476                           ; Regs used in _Timer1Delay: [wreg+status,2+btemp+1]
  1477                           
  1478                           
  1479                           ;Task_b.c: 19: T1CON=0x01;
  1480  025F  3001               	movlw	1
  1481  0260  1283               	bcf	3,5	;RP0=0, select bank0
  1482  0261  1303               	bcf	3,6	;RP1=0, select bank0
  1483  0262  0090               	movwf	16	;volatile
  1484                           
  1485                           ;Task_b.c: 20: TMR1H=0x30;
  1486  0263  3030               	movlw	48
  1487  0264  008F               	movwf	15	;volatile
  1488                           
  1489                           ;Task_b.c: 21: TMR1L=0xD4;
  1490  0265  30D4               	movlw	212
  1491  0266  008E               	movwf	14	;volatile
  1492  0267                     l974:
  1493                           
  1494                           ;Task_b.c: 24: for(int j=0;j<=100;j++)
  1495  0267  01F2               	clrf	Timer1Delay@j
  1496  0268  01F3               	clrf	Timer1Delay@j+1
  1497  0269                     l49:
  1498                           
  1499                           ;Task_b.c: 25: {;Task_b.c: 26: TMR1ON=1;
  1500  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1501  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1502  026B  1410               	bsf	16,0	;volatile
  1503  026C                     l51:	
  1504                           ;Task_b.c: 27: while(TMR1IF==0);
  1505                           
  1506  026C  1C0C               	btfss	12,0	;volatile
  1507  026D  2A6F               	goto	u391
  1508  026E  2A70               	goto	u390
  1509  026F                     u391:
  1510  026F  2A6C               	goto	l51
  1511  0270                     u390:
  1512  0270                     l53:
  1513                           
  1514                           ;Task_b.c: 28: TMR1ON=0;
  1515  0270  1010               	bcf	16,0	;volatile
  1516                           
  1517                           ;Task_b.c: 29: TMR1IF=0;
  1518  0271  100C               	bcf	12,0	;volatile
  1519  0272                     l980:
  1520  0272  3001               	movlw	1
  1521  0273  07F2               	addwf	Timer1Delay@j,f
  1522  0274  1803               	skipnc
  1523  0275  0AF3               	incf	Timer1Delay@j+1,f
  1524  0276  3000               	movlw	0
  1525  0277  07F3               	addwf	Timer1Delay@j+1,f
  1526  0278                     l982:
  1527  0278  0873               	movf	Timer1Delay@j+1,w
  1528  0279  3A80               	xorlw	128
  1529  027A  00FF               	movwf	btemp+1
  1530  027B  3080               	movlw	128
  1531  027C  027F               	subwf	btemp+1,w
  1532  027D  1D03               	skipz
  1533  027E  2A81               	goto	u405
  1534  027F  3065               	movlw	101
  1535  0280  0272               	subwf	Timer1Delay@j,w
  1536  0281                     u405:
  1537  0281  1C03               	skipc
  1538  0282  2A84               	goto	u401
  1539  0283  2A85               	goto	u400
  1540  0284                     u401:
  1541  0284  2A69               	goto	l49
  1542  0285                     u400:
  1543  0285                     l54:
  1544  0285  0008               	return
  1545  0286                     __end_of_Timer1Delay:
  1546                           
  1547                           	psect	text6
  1548  029A                     __ptext6:	
  1549 ;; *************** function _Count *****************
  1550 ;; Defined at:
  1551 ;;		line 9 in file "Task_b.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;		None
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;		None
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1565 ;;      Params:         0       0       0       0       0
  1566 ;;      Locals:         0       0       0       0       0
  1567 ;;      Temps:          2       0       0       0       0
  1568 ;;      Totals:         2       0       0       0       0
  1569 ;;Total ram usage:        2 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		Interrupt level 1
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           
  1579                           ;psect for function _Count
  1580  029A                     _Count:
  1581  029A                     i1l1032:
  1582                           
  1583                           ;Task_b.c: 11: if(TMR0IF == 1)
  1584  029A  1D0B               	btfss	11,2	;volatile
  1585  029B  2A9D               	goto	u48_21
  1586  029C  2A9E               	goto	u48_20
  1587  029D                     u48_21:
  1588  029D  2AA7               	goto	i1l46
  1589  029E                     u48_20:
  1590  029E                     i1l1034:
  1591                           
  1592                           ;Task_b.c: 12: {;Task_b.c: 13: count++;
  1593  029E  3001               	movlw	1
  1594  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1595  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1596  02A1  07DE               	addwf	_count,f
  1597  02A2  1803               	skipnc
  1598  02A3  0ADF               	incf	_count+1,f
  1599  02A4  3000               	movlw	0
  1600  02A5  07DF               	addwf	_count+1,f
  1601  02A6                     i1l1036:
  1602                           
  1603                           ;Task_b.c: 14: TMR0IF = 0;
  1604  02A6  110B               	bcf	11,2	;volatile
  1605  02A7                     i1l46:
  1606  02A7  0871               	movf	??_Count+1,w
  1607  02A8  008A               	movwf	10
  1608  02A9  0E70               	swapf	??_Count,w
  1609  02AA  0083               	movwf	3
  1610  02AB  0EFE               	swapf	btemp,f
  1611  02AC  0E7E               	swapf	btemp,w
  1612  02AD  0009               	retfie
  1613  02AE                     __end_of_Count:
  1614  007E                     btemp	set	126	;btemp
  1615  007E                     wtemp0	set	126
  1616                           
  1617                           	psect	intentry
  1618  0004                     __pintentry:	
  1619                           ;incstack = 0
  1620                           ; Regs used in _Count: [wreg]
  1621                           
  1622  0004                     interrupt_function:
  1623  007E                     saved_w	set	btemp
  1624  0004  00FE               	movwf	btemp
  1625  0005  0E03               	swapf	3,w
  1626  0006  00F0               	movwf	??_Count
  1627  0007  080A               	movf	10,w
  1628  0008  00F1               	movwf	??_Count+1
  1629  0009  120A  118A  2A9A   	ljmp	_Count

Data Sizes:
    Strings     3
    Constant    10
    Data        20
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     42      64
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _Count in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___lwmod

Critical Paths under _Count in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Count in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Count in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Count in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0    1367
                                             16 BANK0     26    26      0
                        _Timer1Delay
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    18      2    1044
                                              4 BANK0     12    10      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                             10 COMMON     2     2      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Timer1Delay                                          2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Count                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer1Delay
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 _Count (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2A      40       5       80.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4C      12        0.0%
ABS                  0      0      4C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Jan 31 21:08:58 2021

                      pc 0002                       l51 026C                       l53 0270  
                     l54 0285                       l49 0269                       l65 00A8  
                     fsr 0004                      l189 01DE                      l465 0222  
                    l475 025E                      l644 02D4                      l930 01EA  
                    l940 0210                      l932 01F1                      l924 01DF  
                    l942 0211                      l934 01F5                      l926 01E1  
                    l950 0223                      l944 0218                      l936 01F9  
                    l928 01E7                      l960 023D                      l952 022B  
                    l938 020A                      l946 021E                      l962 0247  
                    l954 022E                      l980 0272                      l972 025F  
                    l964 024D                      l956 0235                      l982 0278  
                    l974 0267                      l966 0254                      l958 0239  
                    l990 011F                      l968 025A                      l984 010D  
                    l994 0120                      l986 0112                      _GIE 005F  
                    l996 0135                      l988 0118                      l998 013D  
                    _RE0 0048                      _RE1 0049                      _RE2 004A  
                    u300 020A                      u301 0209                      u400 0285  
                    u320 021E                      u401 0284                      u321 021D  
                    u305 0206                      u330 022B                      u410 0118  
                    u315 0212                      u331 022A                      u411 0117  
                    u260 01E7                      u420 0145                      u500 005C  
                    u405 0281                      u261 01E6                      u421 0144  
                    u501 005B                      u350 023D                      u430 016B  
                    u351 023C                      u431 016A                      u280 01F9  
                    u360 0247                      u440 0176                      u281 01F8  
                    u361 0246                      u345 022F                      u441 0175  
                    u450 017C                      u275 01EB                      u451 017B  
                    u435 0167                      u380 025A                      u460 01CA  
                    u381 0259                      u365 0243                      u461 01C9  
                    u390 0270                      u470 01DE                      u391 026F  
                    u295 01FA                      u375 024E                      u471 01DD  
                    u490 0046                      fsr0 0004                      indf 0000  
                   l1000 0141                     l1002 0145                     l1020 017C  
                   l1012 0150                     l1004 0149                     l1100 00DE  
                   l1022 0182                     l1006 014E                     l1030 01CA  
                   l1102 00E6                     l1024 0189                     l1016 016C  
                   l1104 00EE                     l1040 002D                     l1026 01B9  
                   l1018 0176                     l1106 00F6                     l1050 003E  
                   l1042 002E                     l1028 01BF                     l1108 00FE  
                   l1060 0068                     l1052 0053                     l1044 002F  
                   l1070 0077                     l1062 006B                     l1054 005C  
                   l1046 0030                     l1038 0023                     l1072 007A  
                   l1064 006E                     l1056 0062                     l1048 0034  
                   l1090 00B6                     l1146 0088                     l1074 007D  
                   l1066 0071                     l1058 0065                     l1092 00BE  
                   l1076 0080                     l1068 0074                     l1084 0083  
                   l1094 00C6                     l1086 00A9                     l1096 00CE  
                   l1088 00AE                     l1098 00D6                     STR_1 02BE  
                   _PEIE 005E                     i1l46 02A7                     _TMR0 0001  
                   _main 0023                     btemp 007E                     start 000C  
                  ?_main 0070                    _T1CON 0010          __end_of___lwdiv 0223  
        __end_of___lwmod 025F                    _TMR1H 000F                    _TMR1L 000E  
                  _PORTB 0006                    _PORTE 0009                    u48_20 029E  
                  u48_21 029D                    _TRISB 0086                    _TRISE 0089  
                  _Count 029A          __end_of_dpowers 02BE                    _count 005E  
                  _putch 02D4                    main@i 0048                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 010A                   ??_main 0030                   ?_Count 0070  
                 ?_putch 0070                   i1l1032 029A                   i1l1034 029E  
                 i1l1036 02A6                   _TMR0IE 005D                   _TMR0IF 005A  
                 _TMR1IF 0060                   _TMR1ON 0080            ??_Timer1Delay 0072  
              ??___lwdiv 0076                ??___lwmod 007A                   _printf 010A  
                 saved_w 007E                   putch@c 0070  __end_of__initialization 001F  
          __end_of_Count 02AE           __pcstackCOMMON 0070             __pidataBANK0 0286  
    __end_of_Timer1Delay 0286            __end_of_putch 02D5                  ??_Count 0070  
                ??_putch 0072               __pbssBANK0 005E               __pmaintext 0023  
             __pintentry 0004                  ?_printf 0024               __stringtab 02AE  
            _Timer1Delay 025F                  ___lwdiv 01DF                  ___lwmod 0223  
                __ptext1 010A                  __ptext2 02D4                  __ptext3 0223  
                __ptext4 01DF                  __ptext5 025F                  __ptext6 029A  
        __size_of_printf 00D5                  _dpowers 02B4                  main@seg 0034  
   end_of_initialization 001F                  printf@c 002F                  printf@f 002C  
         __end_of_printf 01DF      start_initialization 000F               init_fetch0 02C1  
            __pdataBANK0 004A                 ??_printf 0026                ___latbits 0002  
          __pcstackBANK0 0020             ?_Timer1Delay 0070         ___lwdiv@dividend 0074  
               ?___lwdiv 0072                 ?___lwmod 0020                __pstrings 02AE  
         __size_of_Count 0014         ___lwdiv@quotient 0077             Timer1Delay@j 0072  
         __size_of_putch 0001        interrupt_function 0004              __stringbase 02B3  
             printf@flag 002A               printf@prec 002B         __size_of___lwdiv 0044  
       __size_of___lwmod 003C       __end_of__stringtab 02B4          ___lwdiv@divisor 0072  
        ___lwdiv@counter 0079            __size_of_main 00E7     __size_of_Timer1Delay 0027  
               main@F897 004A                printf@val 002D                 init_ram0 02C5  
               intlevel1 0000         ___lwmod@dividend 0022                stringcode 02AE  
               printf@ap 0029               _OPTION_REG 0081          ___lwmod@divisor 0020  
        ___lwmod@counter 007B                 stringdir 02AE                 stringtab 02AE  
